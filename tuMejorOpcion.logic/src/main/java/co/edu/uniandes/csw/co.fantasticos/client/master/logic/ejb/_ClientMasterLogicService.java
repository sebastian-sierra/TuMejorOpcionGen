/* ========================================================================
   * Copyright 2014 co.fantasticos
   *
   * Licensed under the MIT, The MIT License (MIT)
   * Copyright (c) 2014 co.fantasticos
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
   * ========================================================================
  
  
  Source generated by CrudMaker version 1.0.0.201408112050*/

package co.edu.uniandes.csw.co.fantasticos.client.master.logic.ejb;

import co.edu.uniandes.csw.co.fantasticos.giftcard.logic.dto.GiftCardDTO;
import co.edu.uniandes.csw.co.fantasticos.giftcard.persistence.api.IGiftCardPersistence;
import co.edu.uniandes.csw.co.fantasticos.client.logic.dto.ClientDTO;
import co.edu.uniandes.csw.co.fantasticos.client.master.logic.api._IClientMasterLogicService;
import co.edu.uniandes.csw.co.fantasticos.client.master.logic.dto.ClientMasterDTO;
import co.edu.uniandes.csw.co.fantasticos.client.master.persistence.api.IClientMasterPersistence;
import co.edu.uniandes.csw.co.fantasticos.client.master.persistence.entity.ClientpurchasedGiftCardsEntity;
import co.edu.uniandes.csw.co.fantasticos.client.master.persistence.entity.ClientshopsEntity;
import co.edu.uniandes.csw.co.fantasticos.client.persistence.api.IClientPersistence;
import co.edu.uniandes.csw.co.fantasticos.shop.logic.dto.ShopDTO;
import co.edu.uniandes.csw.co.fantasticos.shop.persistence.api.IShopPersistence;
import co.edu.uniandes.csw.co.fantasticos.threads.ThreadEnviarCorreo;
import javax.inject.Inject;

public abstract class _ClientMasterLogicService implements _IClientMasterLogicService {

    @Inject
    protected IClientPersistence clientPersistance;
    @Inject
    protected IClientMasterPersistence clientMasterPersistance;
    @Inject
    protected IGiftCardPersistence giftCardPersistance;
    @Inject
    protected IShopPersistence shopPersistance;

    public ClientMasterDTO createMasterClient(ClientMasterDTO client) {
        ClientDTO persistedClientDTO = clientPersistance.createClient(client.getClientEntity());
        if (client.getCreatepurchasedGiftCards() != null) {
            for (GiftCardDTO giftCardDTO : client.getCreatepurchasedGiftCards()) {
                GiftCardDTO createdGiftCardDTO = giftCardPersistance.createGiftCard(giftCardDTO);
                ClientpurchasedGiftCardsEntity clientGiftCardEntity = new ClientpurchasedGiftCardsEntity(persistedClientDTO.getId(), createdGiftCardDTO.getId());
                clientMasterPersistance.createClientpurchasedGiftCardsEntity(clientGiftCardEntity);
            }
        }
        
        if (client.getCreateshops() != null) {
            for (ShopDTO shopDTO : client.getCreateshops()) {
                ShopDTO createdShopDTO = shopPersistance.createShop(shopDTO);
                ClientshopsEntity clientShopEntity = new ClientshopsEntity(persistedClientDTO.getId(), createdShopDTO.getId());
                clientMasterPersistance.createClientshopsEntity(clientShopEntity);
            }
        }
        // update giftCard
        if (client.getUpdatepurchasedGiftCards() != null) {
            for (GiftCardDTO giftCardDTO : client.getUpdatepurchasedGiftCards()) {
                giftCardPersistance.updateGiftCard(giftCardDTO);
                ClientpurchasedGiftCardsEntity clientGiftCardEntity = new ClientpurchasedGiftCardsEntity(persistedClientDTO.getId(), giftCardDTO.getId());
                clientMasterPersistance.createClientpurchasedGiftCardsEntity(clientGiftCardEntity);
            }
        }
        // update shop
        if (client.getUpdateshops() != null) {
            for (ShopDTO shopDTO : client.getUpdateshops()) {
                shopPersistance.updateShop(shopDTO);
                ClientshopsEntity clientShopEntity = new ClientshopsEntity(persistedClientDTO.getId(), shopDTO.getId());
                clientMasterPersistance.createClientshopsEntity(clientShopEntity);
            }
        }
        
        return client;
    }

    public ClientMasterDTO getMasterClient(String id) {
        return clientMasterPersistance.getClient(id);
    }

    public void deleteMasterClient(String id) {
        clientPersistance.deleteClient(id);
    }

    public void updateMasterClient(ClientMasterDTO client) {
        //clientPersistance.updateClient(client.getClientEntity());

        //---- FOR RELATIONSHIP
        // persist new giftCard
        if (client.getCreatepurchasedGiftCards() != null) {
            for (GiftCardDTO giftCardDTO : client.getCreatepurchasedGiftCards()) {
                GiftCardDTO createdGiftCardDTO = giftCardPersistance.createGiftCard(giftCardDTO);
                ClientpurchasedGiftCardsEntity clientGiftCardEntity = new ClientpurchasedGiftCardsEntity(client.getClientEntity().getId(), createdGiftCardDTO.getId());
                clientMasterPersistance.createClientpurchasedGiftCardsEntity(clientGiftCardEntity);
                
                ClientDTO sender = clientPersistance.getClient(client.getClientEntity().getId());
                ClientDTO receiver = clientPersistance.getClient(createdGiftCardDTO.getDestinaryId());
                ShopDTO shop = shopPersistance.getShop(createdGiftCardDTO.getShopId());
                (new ThreadEnviarCorreo(sender, createdGiftCardDTO, receiver, shop)).start();
            }
        }
        // update giftCard
        if (client.getUpdatepurchasedGiftCards() != null) {
            for (GiftCardDTO giftCardDTO : client.getUpdatepurchasedGiftCards()) {
                giftCardPersistance.updateGiftCard(giftCardDTO);
            }
        }
        // delete giftCard
        if (client.getDeletepurchasedGiftCards() != null) {
            for (GiftCardDTO giftCardDTO : client.getDeletepurchasedGiftCards()) {
                clientMasterPersistance.deleteClientpurchasedGiftCardsEntity(client.getClientEntity().getId(), giftCardDTO.getId());
                giftCardPersistance.deleteGiftCard(giftCardDTO.getId());
            }
        }
        
        // delete shop
        if (client.getDeleteshops() != null) {
            for (ShopDTO shopDTO : client.getDeleteshops()) {
                clientMasterPersistance.deleteClientshopsEntity(client.getClientEntity().getId(), shopDTO.getId());
            }
        }
        // persist new shop
        if (client.getCreateshops() != null) {
            for (ShopDTO shopDTO : client.getCreateshops()) {
                ClientshopsEntity clientShopEntity = new ClientshopsEntity(client.getClientEntity().getId(), shopDTO.getId());
                clientMasterPersistance.createClientshopsEntity(clientShopEntity);
            }
        }
        // update shop
        if (client.getUpdateshops() != null) {
            for (ShopDTO shopDTO : client.getUpdateshops()) {
                clientMasterPersistance.deleteClientshopsEntity(client.getClientEntity().getId(), shopDTO.getId());
                shopPersistance.updateShop(shopDTO);
                ClientshopsEntity clientShopEntity = new ClientshopsEntity(client.getId(), shopDTO.getId());
                clientMasterPersistance.createClientshopsEntity(clientShopEntity);
                
            }
        }
    }
    
}
